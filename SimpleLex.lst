
// ==========================================================================
//  GPLEX error listing for lex source file <SimpleLex.lex>
// ==========================================================================
//  Version:  1.1.3.301
//  Machine:  DS-PC
//  DateTime: 11.02.2018 21:06:34
//  UserName: ???????
// ==========================================================================


%using SimpleParser;
%using QUT.Gppg;
%using System.Linq;

%namespace SimpleScanner

Alpha 	[a-zA-Z_]
Digit   [0-9] 
AlphaDigit {Alpha}|{Digit}
INTNUM  {Digit}+
REALNUM {INTNUM}\.{INTNUM}
ID {Alpha}{AlphaDigit}* 

%%

{INTNUM} { 
  return (int)Tokens.INUM; 
}

{REALNUM} { 
  return (int)Tokens.RNUM;
}

{ID}  { 
  int res = ScannerHelper.GetIDToken(yytext);
  return res;
}

":=" { return (int)Tokens.ASSIGN; }
";"  { return (int)Tokens.SEMICOLON; }
"+"  { return '+'; }
"-"  { return '-'; }
"*"  { return '*'; }
"/"  { return '/'; }
"("  { return '('; }
")"  { return ')'; }
"==" { return '=='; }
//------------^--^
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
"<"  { return '<';}
">"  { return '>';}
 
[^ \r\n] {
	LexError();
	return (int)Tokens.EOF; // –∫–æ–Ω–µ—? —?–∞–∑–±–æ—?–∞
}

%{
  yylloc = new LexLocation(tokLin, tokCol, tokELin, tokECol); // –ø–æ–∑–∏—?–∏—è —Å–∏–º–≤–æ–ª–∞ (—?–µ—?–º–∏–Ω–∞–ª—?–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—?–µ—?–º–∏–Ω–∞–ª—?–Ω–æ–≥–æ), –≤–æ–∑–≤—?–∞—?–∞–µ–º–∞—è @1 @2 –∏ —?.–¥.
%}

%%

public override void yyerror(string format, params object[] args) // –æ–±—?–∞–±–æ—?–∫–∞ —Å–∏–Ω—?–∞–∫—Å–∏—?–µ—Å–∫–∏—? –æ—?–∏–±–æ–∫
{
  var ww = args.Skip(1).Cast<string>().ToArray();
  string errorMsg = string.Format("({0},{1}): –?—Å—?—?–µ—?–µ–Ω–æ {2}, –∞ –æ–∂–∏–¥–∞–ª–æ—Å—? {3}", yyline, yycol, args[0], string.Join(" –∏–ª–∏ ", ww));
  throw new SyntaxException(errorMsg);
}

public void LexError()
{
	string errorMsg = string.Format("({0},{1}): –ù–µ–∏–∑–≤–µ—Å—?–Ω—?–π —Å–∏–º–≤–æ–ª {2}", yyline, yycol, yytext);
    throw new LexException(errorMsg);
}

class ScannerHelper 
{
  private static Dictionary<string,int> keywords;

  static ScannerHelper() 
  {
    keywords = new Dictionary<string,int>();
    keywords.Add("begin",(int)Tokens.BEGIN);
    keywords.Add("end",(int)Tokens.END);
    keywords.Add("cycle",(int)Tokens.CYCLE);
  }
  public static int GetIDToken(string s)
  {
    if (keywords.ContainsKey(s.ToLower())) // —è–∑—?–∫ –Ω–µ—?—?–≤—Å—?–≤–∏—?–µ–ª–µ–Ω –∫ —?–µ–≥–∏—Å—?—?—?
      return keywords[s];
    else
      return (int)Tokens.ID;
  }
}
// ==========================================================================

